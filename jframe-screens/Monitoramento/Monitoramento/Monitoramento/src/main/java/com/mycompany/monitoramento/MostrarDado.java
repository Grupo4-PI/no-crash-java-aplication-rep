/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.monitoramento;

import com.github.britooo.looca.api.core.Looca;
import com.github.britooo.looca.api.group.discos.Disco;
import com.github.britooo.looca.api.group.discos.Volume;
import com.github.britooo.looca.api.group.sistema.Sistema;
import java.awt.Component;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Instant;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author guh_a
 */
public class MostrarDado extends javax.swing.JFrame {



    /**
     * Creates new form MostrarDado
     */
    public MostrarDado() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mostrarSistemaOperacional = new javax.swing.JButton();
        mostrarProcessador = new javax.swing.JButton();
        mostrarDisco = new javax.swing.JButton();
        mostrarMemoria = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mostrarSistemaOperacional.setText("SO");
        mostrarSistemaOperacional.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarSistemaOperacionalActionPerformed(evt);
            }
        });

        mostrarProcessador.setText("Processador");
        mostrarProcessador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarProcessadorActionPerformed(evt);
            }
        });

        mostrarDisco.setText("Disco");
        mostrarDisco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarDiscoActionPerformed(evt);
            }
        });

        mostrarMemoria.setText("Memoria");
        mostrarMemoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarMemoriaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(mostrarMemoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(mostrarDisco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(mostrarSistemaOperacional))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(mostrarProcessador)))
                .addContainerGap(177, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(mostrarSistemaOperacional)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mostrarProcessador)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mostrarDisco)
                .addGap(12, 12, 12)
                .addComponent(mostrarMemoria)
                .addContainerGap(121, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mostrarSistemaOperacionalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarSistemaOperacionalActionPerformed
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?allowPublicKeyRetrieval=true&useSSL=false","aluno","sptech");
            
            Looca looca = new Looca();
            Integer arquitetura = looca.getSistema().getArquitetura();
            String fabricante = looca.getSistema().getFabricante();
            Instant inicializado = looca.getSistema().getInicializado();
            Boolean permissao = looca.getSistema().getPermissao();
            Long tempoEmAtividade = looca.getSistema().getTempoDeAtividade();
            String sistemaOperacional = looca.getSistema().getSistemaOperacional();
             
            
            Statement stm = con.createStatement();
            stm.execute("INSERT INTO `sistema` "
                    + "(`arquiteturaBD`, `frabricanteBD`,`inicializadoBD`, `permissaoBD`, `tempoEmAtividadeBD`, `sistemaOperacionalBD`)"
                    + "VALUES ('"+arquitetura+"','"+fabricante+"','"+inicializado+"','"+permissao+"','"+tempoEmAtividade+"','"+sistemaOperacional+"')");
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(MostrarDado.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mostrarSistemaOperacionalActionPerformed

    private void mostrarProcessadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarProcessadorActionPerformed
        // TODO add your handling code here:
        
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?allowPublicKeyRetrieval=true&useSSL=false","aluno","sptech");
            
            Looca looca = new Looca();
            String nomeProcessador = looca.getProcessador().getNome();
            String fabricante = looca.getProcessador().getFabricante();
            Long frequencia = looca.getProcessador().getFrequencia();
            String idMaquina = looca.getProcessador().getId();
            String identificador = looca.getProcessador().getIdentificador();
            Integer cpuFisica = looca.getProcessador().getNumeroCpusFisicas();
            Integer cpuLogica = looca.getProcessador().getNumeroCpusLogicas();
            Integer pacoteFisico = looca.getProcessador().getNumeroPacotesFisicos();
            String micro = looca.getProcessador().getMicroarquitetura();
            Double uso = looca.getProcessador().getUso();
             
            
            Statement stm = con.createStatement();
            stm.execute("INSERT INTO `processador`(`nomeProcessadorBD`, `frabricanteBD`,`frequenciaBd`, `idMaquinaBD`, `identificadorBD`, `cpuFisicaBD`, `cpuLogicaBD`, `pacoteFisicoBD`, `microBD`, `usoBD`)VALUES ('"+nomeProcessador+"','"+fabricante+"','"+frequencia+"','"+idMaquina+"','"+identificador+"','"+cpuFisica+"','"+cpuLogica+"','"+pacoteFisico+"','"+micro+"','"+uso+"')");
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(MostrarDado.class.getName()).log(Level.SEVERE, null, ex);
        }                                                         
    }//GEN-LAST:event_mostrarProcessadorActionPerformed

    private void mostrarMemoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarMemoriaActionPerformed
        // TODO add your handling code here:
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?allowPublicKeyRetrieval=true&useSSL=false","aluno","sptech");
            
            Looca looca = new Looca();
            Long disponivel = looca.getMemoria().getDisponivel();
            Long emUso = looca.getMemoria().getEmUso();
            Long total = looca.getMemoria().getTotal();

    



             
            
            Statement stm = con.createStatement();
            stm.execute("INSERT INTO `memoria`(`disponivelBD`, `emUsoBD`,`totalBD`)VALUES ('"+disponivel+"','"+emUso+"','"+total+"')");
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(MostrarDado.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mostrarMemoriaActionPerformed

    private void mostrarDiscoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarDiscoActionPerformed
        // TODO add your handling code here:
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb?allowPublicKeyRetrieval=true&useSSL=false","aluno","sptech");
            
            Looca looca = new Looca();
            Integer qtdDisco = looca.getGrupoDeDiscos().getQuantidadeDeDiscos();
            List<Disco> discoAtual = looca.getGrupoDeDiscos().getDiscos();
            Integer qtdVolume = looca.getGrupoDeDiscos().getQuantidadeDeVolumes();
           // Long tamanhoTotal = looca.getGrupoDeDiscos().getTamanhoTotal();
            List<Volume> volume = looca.getGrupoDeDiscos().getVolumes();



             
            
            Statement stm = con.createStatement();
            stm.execute("INSERT INTO `disco`(`qtdDiscoBD`, `discoAtualBD`,`qtdVolumeBD`,`volumeBD`)VALUES ('"+qtdDisco+"','"+discoAtual+"','"+qtdVolume+"','"+volume+"')");
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(MostrarDado.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mostrarDiscoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MostrarDado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MostrarDado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MostrarDado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MostrarDado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MostrarDado().setVisible(true);
               
                        
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton mostrarDisco;
    private javax.swing.JButton mostrarMemoria;
    private javax.swing.JButton mostrarProcessador;
    private javax.swing.JButton mostrarSistemaOperacional;
    // End of variables declaration//GEN-END:variables
}
